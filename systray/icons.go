// Code generated by go-bindata.
// sources:
// icons/idle.ico
// icons/problem.ico
// icons/working.ico
// DO NOT EDIT!

package systray

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _iconsIdleIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\x6d\x4c\x1c\x55\x1b\x3d\xc3\xc0\xf2\xf5\xc2\x8b\x5a\x28\x20\x1d\x86\x14\xea\xf2\x3d\x60\xb1\x13\x62\x2c\x95\x45\x58\x4a\x29\xae\x94\xa0\xb1\xb8\xb0\xac\x40\xa2\x29\xd2\xcd\x5a\x8d\x95\xb5\xad\x0d\x44\x63\x88\x35\x82\xf1\x2b\x6d\x8a\xa9\x5f\x8d\x8d\x98\x34\xf3\x43\xa9\xa6\xa6\x08\xb4\x46\x1a\xab\xb6\x3f\x10\x6c\x63\x53\x62\xfa\xcb\x50\x6d\xbb\xe6\xc2\x25\xdd\xe2\x2e\xdd\xd9\xdd\x01\xb6\xde\x9b\x9c\x4c\x86\x7d\x9e\x73\x0e\x77\x66\xee\x73\xf7\xde\x59\x80\x43\x18\xe2\xe2\xc8\x51\x44\x6b\x28\x50\x07\x20\x31\x71\xf6\xbc\x2b\x12\xf8\x32\x14\x10\xc5\xd9\xf3\x43\x71\xc0\x43\xb1\x80\x24\xd1\xf3\x0c\xe0\x0f\x01\x33\x8d\x9c\xd7\x86\x00\x6f\x1a\x00\x3d\x80\x38\x00\x22\xfd\xfb\x4c\x0b\x05\xd2\xf2\x66\x31\xbf\xc9\x8a\x40\xc0\xcb\x8a\x90\x22\x2b\x42\xaa\x07\xa4\xd0\x18\x4f\xf9\x49\xb2\x22\x0c\xc9\x8a\x30\x29\x2b\xc2\xc4\x3c\x4c\xd2\xcf\x92\x16\xc8\x4f\xa1\x71\x4e\x0f\x98\xa4\x31\xae\x79\x3c\xe5\x4c\x96\x15\xa1\x48\x56\x84\x0b\x0b\xe4\x5f\xa0\x31\xc9\x34\x67\xee\xff\x25\xbe\xce\xd3\xcf\xaf\x2e\x90\x7f\x95\xc6\x9c\xa7\x39\x73\x7d\x35\xb1\x40\x8e\x27\x4c\xb8\xf4\x2b\xcb\xf7\x3d\xdf\xdf\xeb\xe7\xd7\xfd\xe3\xef\xfd\x1b\xe0\xe7\x47\xf5\xf3\x3b\x1e\x7e\x03\xde\x36\xd7\x1c\x32\xce\x24\x02\x90\x5c\xc7\x99\x48\xcf\xe3\x8c\x1b\xcf\xaa\xe1\x6d\x93\x15\x21\x5a\x56\x04\x9b\xac\x08\x9d\x5e\x82\xc4\x46\xab\xe0\x4f\x90\x15\xe1\xb2\x8a\x7b\x96\xc4\x26\xa8\xe4\xbf\xa8\x82\xff\xe2\x42\xfc\x6e\xfa\x32\xde\x07\xfe\x78\x4f\xd7\x83\xf6\x77\x82\x0b\x32\x65\x45\xb8\xa4\x82\xff\x12\xcd\x71\xe5\x88\x76\xe1\xb7\x51\x0f\x73\x20\xf1\xd7\x54\xf0\x5f\xa3\x39\xae\x1c\x36\x17\xfe\x4e\x1f\xc6\xa1\x5b\xa1\x93\xf1\x33\x7e\xc6\xbf\x28\xfc\x5a\x8f\x0f\x5a\x8f\x6f\x9a\x8e\xcf\x5a\xd7\x17\x0f\xfc\x5a\xd6\x47\xad\xeb\x7b\xc0\xe6\x27\x4e\xa7\x13\xd3\x48\xbd\x09\x0e\x70\x3e\x61\x3e\x0f\xe1\xd6\xd3\xef\x7a\x25\xae\xf3\xb0\xb8\x7f\xcf\xc3\x48\x2c\x83\x13\x70\xc2\x2d\xfc\x1d\x8f\x3c\xf1\x32\x7d\xa6\xbf\x9c\xf4\xfd\xd5\x51\x0b\xa6\xcf\xf4\x99\x3e\xd3\x67\xfa\x4c\x9f\xe9\x2f\xbd\xfe\x52\xcf\x3f\x98\x3e\xd3\x5f\x4a\xfd\xff\x30\x66\x1b\xe9\x12\x37\x18\x04\x78\x7f\xe0\x89\x77\xae\xe9\xe9\x5e\x91\xd9\x75\x9d\x22\xdd\xbb\xfd\xa2\xdb\xb5\xf9\xba\xce\xa4\xd5\xbe\x99\x0f\xfe\xc3\x65\x45\x48\x97\x15\x21\x5b\x23\x10\x6e\x15\x3b\x94\xaa\xfd\x13\xfe\x23\xb2\x22\x9c\xd6\x08\x84\x3b\x5d\x43\xff\x39\xb2\x22\x9c\xd3\x70\xfe\x40\xb8\x73\x34\xf4\x9f\x4d\xfb\x49\x2b\xff\x84\x3b\x9b\xf9\x67\xfe\x99\x7f\xd5\xde\xbc\xc1\x6a\x59\x11\xc6\x34\xf4\x3f\x46\x35\x54\xd7\x38\x2f\x6b\x53\xb5\xac\x08\x67\x35\xf4\x7f\x96\x6a\xa8\xae\x71\x5e\xd6\x26\xc2\x3f\xad\xa1\xff\x69\xaa\xa1\xba\xc6\x2d\x42\x6d\x0a\x14\xdc\xd6\xb8\x45\x78\x36\x03\x05\xb7\xcf\x38\xf3\xcf\xfc\x33\xff\xcc\x3f\xf3\xcf\xfc\x2f\x73\x30\xff\xcc\x3f\xf3\xcf\xfc\x33\xff\xcc\x3f\xf3\xbf\x7c\xfc\x07\xfb\xf7\xf7\x60\x5f\x3f\x09\xf6\xf5\xab\xa0\x5e\x3f\xf4\xa6\x2d\xe7\xf5\x5b\xe6\x9f\xf9\x67\xfe\x6f\xe9\x3f\xd8\xf7\x4f\x83\x7d\xff\x3a\xd8\xdf\x1f\x08\xea\xf7\x37\x96\x63\xbb\xf1\x92\x12\x3d\x8e\x03\xe1\x01\x38\x0e\x12\x72\xfe\xf6\x39\x06\xaa\x5f\xe6\xf7\x77\x77\x4d\x75\x79\x4c\x54\x72\x14\x80\x18\x63\x85\xc1\x44\x7f\x5e\x26\x86\xf0\x00\x62\x57\xbc\xde\x02\x70\x29\x6d\xa5\xa5\x35\x6d\x16\x0b\xb0\xe3\x17\x8b\xd9\x5c\xd8\x6e\x7b\xa6\xc3\x7a\xa7\xd9\x7c\x62\x34\x3b\x33\xaa\xe3\x59\x53\x57\xd7\xab\x26\xf3\xfa\x53\x83\xdf\x0e\x8e\x40\xd7\x3d\x74\x3c\xec\x35\x8e\x7b\x40\xb4\x37\xbc\xd8\x90\xc5\x67\x99\x9b\xcd\xd3\xf6\x18\x43\xa1\xf4\xf8\x8f\x61\x6f\x1d\x2f\x49\x1e\xaf\xcc\xd3\x67\x71\x3f\x74\x3a\x7e\xd2\x67\x7c\x21\x27\xb5\x1e\xe4\x7a\xde\xdd\xda\x60\xc2\x8a\x96\x77\xf8\xe6\x57\xd2\xad\xbb\x7f\xbe\xbb\x64\xea\x40\x8f\xd8\x22\xfe\x1d\xd1\x33\xda\x1b\xdb\xf8\x04\x77\x64\x9f\x38\x75\x8f\x68\xbf\xe3\xfb\xbb\x4a\xfe\x5c\xd9\xf3\x97\x4d\x7a\xbb\x9b\x7f\x2a\x76\x4f\x2e\xdf\xd4\x7b\xb0\xce\x31\x65\x6d\x3f\x99\x7f\x28\xe7\xbb\xaa\x53\xfa\x87\xa5\x81\x81\x81\xda\xf6\xaa\xa1\xcd\x95\x5b\x22\x0e\xe7\xe4\x19\x47\x73\xeb\x2e\x8f\x6c\x3c\x99\x9f\x75\x22\xbf\x32\xc7\xb8\x89\xfb\xe8\xe5\xa3\xff\xff\x5f\x68\x5a\xd4\x86\xb4\x0f\xb8\xd3\xad\xfb\x8d\x07\xbe\x8a\x0c\xa9\xb9\xbf\xa4\xfe\x7d\xfe\xd8\xaf\xc3\x7a\xbb\x2e\x6d\x2f\x86\xfa\xcb\xac\x9f\x1d\x35\x17\xae\x19\x29\xef\x2b\x28\xdf\xf5\xd2\xb1\xce\x4c\x9e\x1f\x4e\xdd\xd3\x67\xcc\xe7\xbf\x09\x59\xa5\xd3\x5d\xff\x30\xa2\xa0\xa8\x54\xa7\xe3\x76\xea\xf6\xee\xdc\x8e\xaf\x3f\xdf\x7c\xbd\xbf\xa9\x6f\x98\x74\x9a\xa5\xc2\xb4\x09\x78\x3e\x03\x70\xec\x06\xae\x38\x01\xc7\xef\x80\x29\x02\x5c\x7c\x3d\x50\xdc\x0b\xac\xdc\x76\xe6\xb1\xd4\x1e\x00\x91\x35\x55\xb5\x65\x33\x2f\xea\x41\x50\xe4\x37\xfa\x67\x46\xad\x10\x9b\xa9\xfa\x11\xc0\xbe\x6f\x54\x06\xc0\x35\x6d\x2c\x37\xa0\x2b\x6c\x55\x05\x89\x6f\xaf\x78\x74\x3b\x90\xb7\x9a\x80\xdb\xd1\xbf\xde\x4e\x04\x8d\x86\x0d\xb5\x89\x63\x16\xf3\x20\x3e\xd9\xff\xb1\x43\x5c\xeb\x58\xab\x3b\x93\x25\xd5\x4b\xf5\x89\xbf\x5d\x21\x57\x70\x8b\x68\x2f\x72\xbc\x60\xdd\x0a\x20\xc3\x56\x56\x6f\x6b\x6e\xb4\x59\x8b\x2d\x1d\xd6\x46\x9b\x15\x85\x52\x41\x61\xae\xb4\x2e\x57\x5a\x57\x2b\x49\xc5\xf7\x4a\xc5\xd2\x7d\xd9\x92\x5c\x2c\x49\xe7\x5a\xdf\xeb\xbf\x29\xe1\xe9\x6d\xcd\x6d\x4f\x3e\xe7\x39\xe1\xd3\xa2\x35\x49\xe4\x36\x35\x96\x55\x1b\x0e\x3f\x68\xde\xf5\x4f\x00\x00\x00\xff\xff\x11\x2e\x6a\xf6\xea\x46\x00\x00")

func iconsIdleIcoBytes() ([]byte, error) {
	return bindataRead(
		_iconsIdleIco,
		"icons/idle.ico",
	)
}

func iconsIdleIco() (*asset, error) {
	bytes, err := iconsIdleIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "icons/idle.ico", size: 18154, mode: os.FileMode(438), modTime: time.Unix(1489579452, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _iconsProblemIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\x7b\x6c\x53\xd5\x1f\xff\xdc\xde\xad\x7b\xfc\x60\xbf\x82\x3c\xc6\x1c\xb6\x0b\x1b\x94\x3d\xef\xa6\x08\x4c\x23\x85\x75\x6c\xe5\x31\x66\xad\x04\x8d\xce\x8e\xae\x3c\x82\x84\x09\xcd\x44\x09\xae\x3c\xc4\x11\xd1\x4c\x0d\x32\xe2\x83\x48\xc0\xa0\x7f\x10\x16\x31\x21\xfe\x21\x05\x83\x61\xf2\x32\xb2\x20\x0a\x7f\x20\x08\x71\x40\x04\xfd\xc3\x0c\x04\x8e\xb9\xbb\x67\xd9\x5d\xd7\x96\xbe\xce\xc6\x85\xf3\x4d\x3e\xb9\x3d\xbd\xdf\xef\xf7\xf3\xe9\x39\xe7\x9e\xef\xed\xb9\x2d\x20\x20\x11\x06\x83\x7c\x34\x61\x51\x02\x30\x17\x40\x7a\xba\xd2\x6e\x4a\x01\xbe\x4d\x00\x4c\x26\xa5\xbd\xcb\x00\x4c\x4f\x03\x24\x89\xb6\x73\x80\x3f\x1f\x41\x97\xc9\xed\x1a\x1d\xf0\xa1\x15\x30\x03\x30\x00\x30\xd1\xf7\xbb\x2c\x01\xc8\x2a\x54\xd0\xd7\x88\x0c\x11\x20\x99\x00\x31\x06\x41\x26\xf5\x09\x16\x3f\x0a\x20\x6d\x00\xb9\x00\x90\xf3\x7e\xb8\x40\xcf\x8d\x0a\x11\x9f\x49\xfd\x48\x10\x5c\xa0\x3e\xea\x38\x91\xe6\xcc\x00\xc8\x04\x80\x5c\x0a\x11\x7f\x89\xfa\x64\xd0\x98\xee\xcf\x2b\xeb\xba\x48\xcf\xdf\x0a\x11\x7f\x8b\xfa\x5c\xa4\x31\xdd\x7d\x75\xbe\xb7\xdf\x5f\x04\x38\x4f\x80\xbf\x29\xfc\x5f\xcb\xe7\xbb\x62\x8c\x81\xe3\x37\x11\x60\x08\x01\xde\xa3\xf0\x7f\xfd\x0e\xe3\xf8\x58\xf5\x87\x85\x78\xc5\xc7\x3a\x7e\x31\xce\x9f\x58\xe7\x6f\x5c\xaf\x9f\x88\xaf\xdf\x73\x49\x3d\x08\xd7\xd4\x31\xf2\x3a\x93\x0e\x40\x52\xaf\x33\x29\xa1\xd6\x99\x3e\x9a\xa3\x40\xb8\x46\xfe\x07\x10\x0f\x40\x1a\xc3\x84\x47\x89\x09\x3b\xff\x08\x80\x5c\x8f\x60\xce\x5e\x57\x62\x22\xca\xdf\x11\x41\xfe\x8e\xd0\xf9\xfb\xf4\xe5\xf0\x28\xf2\x0f\x0f\x3e\x1e\x5d\xfd\x3d\x42\x85\xf1\x00\xb9\x12\x41\xfe\x2b\x34\x46\x9d\x43\x35\x1e\x5d\xe3\xd3\xa1\x82\xec\x7f\x3b\x82\xfc\xb7\x69\x8c\x3a\x87\x47\x95\xbf\x31\x8a\x75\xe8\x6e\x68\x0c\x2f\xff\x35\x02\x74\x50\xdc\xa4\xe8\x6e\x5f\x0b\xe0\x73\x23\xc2\xfc\x0e\x02\x8c\xa0\x38\x44\xd1\xdd\x76\x04\xf0\xf1\x45\x98\xbf\x4c\x35\x21\xf6\x53\x74\xb7\xcb\x02\xf8\x7c\x13\x95\x7e\x81\x99\x7e\xd6\xfd\xcf\x7a\xfe\xf0\xfc\xfd\xb0\x3e\xb0\x5e\xdf\x18\xaf\xcf\xfe\x16\xef\xfa\x12\x30\x3f\xcb\xfa\xc8\xba\xbe\xc7\xed\xfe\x84\x10\x82\x4e\x18\x7b\xc1\x0b\x21\x2a\xf8\xe7\x91\x73\x9b\xe9\x77\x3d\x8b\xfa\x3e\xcc\xd0\xf7\x3e\x4c\xf6\xe5\x08\x8e\x58\xd7\x23\xce\xcf\xf9\xb5\xc0\x1f\x2b\x4f\xac\xba\x38\xbf\x16\xf8\xfd\x0b\x5b\xb4\xef\x73\xfe\x58\xf8\x75\xc2\x40\xf1\x0f\xf4\xfc\xe3\xfc\x9c\x9f\xf3\xb3\xe0\x1f\xe8\xfb\x0f\xce\xcf\xf9\xef\x45\xfe\x07\x00\x8a\x05\xe9\x40\x1f\x20\xc6\x82\x50\x03\x23\x9b\x99\x3e\x2b\x72\xaa\xf7\x29\xb2\xc3\x7d\x5e\x74\xbf\x5a\xb4\xfb\x4c\xb1\xef\x4b\xc5\x49\x7f\x12\x40\xb2\x01\x92\xc7\x08\xd9\x0a\x07\x33\xfd\x72\xfe\x56\x80\xb4\x33\x42\xab\xc2\xc1\x4c\x7f\x3e\x40\xce\xb2\xb8\x6f\xa0\x38\xab\x70\x30\xd3\x9f\x47\xfb\x89\x95\xfe\x76\x85\x83\xeb\xe7\xfa\xb9\xfe\x08\xb5\x85\x83\x31\x00\x39\xc9\x50\xff\x49\xca\x11\x45\x8d\x0b\xab\x36\x55\x01\xe4\x0c\x43\xfd\x67\x28\x47\x14\x35\x2e\xac\xda\x24\xe7\xef\x64\xa8\xbf\x93\x72\x44\x51\xe3\x98\xd7\xa6\x78\x21\x48\x8d\x63\x7e\x6d\xc6\x0b\x41\xae\x71\xae\x5f\x9b\xfa\x2f\x13\xa0\x3d\x00\x2e\x33\xf0\x61\xa1\x7f\x33\x01\xf2\x02\x60\x33\x03\x1f\x16\xfa\x57\x05\x29\x30\xab\x18\xf8\xb0\xd0\xef\x0d\xc2\xeb\x65\xe0\xc3\xf5\x87\x9a\x3f\x02\x85\xb6\xe6\x4f\xcf\x75\x27\xc8\x10\xb4\x76\xfd\x6a\x7d\xfd\xec\x77\x70\xfd\x5c\x3f\xd7\xcf\xf5\x73\xfd\x5c\xbf\x5a\xbf\xd6\xbf\xbf\x6b\x7d\xff\x44\xeb\xfb\x57\x1a\xdf\x3f\x0c\xc7\xee\xe5\xfd\x5b\xae\x9f\xeb\xe7\xfa\xef\xa2\x5f\xeb\xcf\x4f\xb5\xfe\xfc\x5a\xeb\xbf\x1f\xe8\x27\x3c\x38\xd6\xf3\x23\x25\x7a\x3c\x07\x24\xc5\xe1\xe8\x93\x93\x8b\xf7\xcf\x31\x5e\xfd\xe2\xdf\xdf\x1b\xab\xab\x2a\x06\xa7\x66\xa4\x02\x18\x6c\xab\xb4\xda\xe9\xdf\xcb\x4c\x3a\x11\x40\xda\xb0\xf7\x17\x02\x42\xe6\xe2\xb2\xb2\xea\xc5\x2e\x17\xb0\xf2\x57\x97\xd3\x59\x52\xef\x79\x65\xb9\x7b\xa8\xd3\x79\xf8\x58\xde\xf8\xd4\xe5\xaf\xda\x9b\x9a\x36\xd9\x9d\x53\x4e\xf8\xbe\xf7\x1d\x85\x7e\x63\xdb\xa1\xc4\x77\x05\xe1\x29\x53\x43\xcd\x1b\x35\xb9\x62\xae\xb3\xce\xd9\xd9\x30\xd8\x5a\x22\xbd\x70\x2a\x71\xeb\x21\x4b\xc6\xb9\x19\x85\xe6\x5c\xe1\xa7\x46\xef\x69\x73\xce\xd7\x93\x46\x2d\xda\x21\x34\x7f\xf2\x62\x8d\x1d\xc3\x16\x7e\x2c\xd6\xbd\x9d\xed\x5e\xf7\xcb\xc3\x96\xab\xdb\x9b\x4d\x0b\x4d\xff\x26\x37\x1f\xdb\x92\x56\xfb\x92\xd0\xfa\x81\xe9\xea\x38\x53\xc3\x90\x1f\x1f\xb2\xfc\x33\xb2\xf9\xa6\x47\xfa\x68\xa3\xf8\x72\xda\xfa\x02\x71\xfe\x96\x1d\x73\xbd\x57\xdd\xf5\xc7\x8b\x76\xe5\xff\x30\xeb\x84\xf9\x69\x69\xef\xde\xbd\x8e\xfa\x59\x6d\x73\x66\x3c\x9b\xbc\x3b\xbf\xd0\x76\xac\x60\xee\xf5\xa3\x33\x8f\x17\xe5\x1e\x2e\x9a\x91\x6f\x9b\x2d\x7c\xf9\xe6\xbe\xff\x0f\x4a\xc8\x4a\x9d\x9a\xf5\xb9\xd0\xbe\xe8\x33\xdb\xf6\xfd\x29\xba\xea\x27\x2d\xf3\xb6\x89\x07\x7e\x3b\x62\x6e\xd0\x67\x6d\x40\xdb\xce\x72\xf7\x9e\x7d\xce\x92\xb1\x47\x2b\x5a\x8a\x2b\xd6\xae\x39\xd0\x38\x5e\x14\x8f\x18\xd7\xb7\xd8\x8a\xc4\xef\x74\xa3\xf5\xfa\x3b\x5f\x24\x17\x4f\x28\xd3\xeb\x85\xd5\xfa\x0d\xab\x57\xe0\xe0\x57\x73\xee\xec\x9c\xdf\x72\x44\xee\x34\x57\xa5\x7d\x36\xf0\x7a\x0e\xe0\x5d\xa7\xfc\x71\xd8\xfb\x07\x60\x4f\x86\x30\x7c\x1e\x50\xba\x05\x18\xb9\xec\xe7\xe7\x8d\xcd\x00\x06\x55\xcf\x72\x94\x2b\x43\x20\x9b\xa0\x9b\x7e\xaa\x66\x89\xfc\xc2\x63\xaf\x7a\x06\x96\x4b\xa7\x17\xc8\x8d\xf9\x33\x2b\xac\x68\x4a\x1c\x5d\x09\x20\xa5\xbe\xf2\xb9\x15\x40\xe1\x18\x19\xc2\xca\x9d\x53\x1a\x00\x98\x6d\xd6\xa9\x8e\xf4\x93\x2e\xa7\x4f\x37\x6d\x8d\xd7\xa1\x5f\x62\x4e\x4f\xa8\x3e\x9e\x7c\x66\xeb\x84\xa5\x39\x2d\xad\x43\xc7\xad\xdb\x33\xf9\xf7\x1b\xf2\x58\x9e\x48\x9a\x5c\x20\x3e\x66\x35\x02\xc8\xf1\x94\xcf\xf3\xd4\xd5\x7a\xdc\xa5\xae\xe5\xee\x5a\x8f\x1b\x25\x52\x71\x49\x81\x34\xb1\x40\x9a\xe8\x90\xa4\xd2\x47\xa5\xd2\xe2\xc7\xf3\xa4\x49\xa5\x92\x64\x38\xf8\xe9\x13\xbd\x02\x96\x2e\xab\x5b\xbc\xe0\xb5\xe0\x01\xb5\xdb\xc6\xbe\x25\x7f\x1c\x5b\x79\x95\x75\xf7\x34\xe7\xda\xff\x02\x00\x00\xff\xff\xab\xc2\x27\x42\xf4\x46\x00\x00")

func iconsProblemIcoBytes() ([]byte, error) {
	return bindataRead(
		_iconsProblemIco,
		"icons/problem.ico",
	)
}

func iconsProblemIco() (*asset, error) {
	bytes, err := iconsProblemIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "icons/problem.ico", size: 18164, mode: os.FileMode(438), modTime: time.Unix(1489579452, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _iconsWorkingIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\x7d\x6c\x14\xe7\xd1\x9f\xf5\x19\x63\x4c\xf0\x6b\xfc\xc6\xc1\x67\x8e\xfa\x68\x8e\xd6\x60\xc0\x87\xa3\x28\xc8\xaa\x1a\x53\x4c\xc1\x84\x10\xd7\xa5\x88\x56\x98\xde\xad\x7d\x07\x98\x96\x60\xb2\xfe\x68\x4b\x62\xd7\x24\x91\x51\xab\xd6\x6a\xa4\x42\xd5\x46\x15\x51\x1c\x5d\x1b\x4a\x4d\x4b\x11\xff\xb4\x35\xa5\x69\x7d\xc1\xc6\x25\xbe\x52\x52\x82\x64\xee\x04\x4a\x02\x05\xc4\xd9\x27\x9c\x72\x3b\xd5\x3c\xbb\xb6\xef\xdb\xbb\x77\xb7\x04\x92\x5d\xf1\xd3\x7a\x3f\x66\xe6\xf7\xcc\xcc\xf3\xcc\xec\xde\x02\xc0\xc1\x0c\xc8\xcb\xa3\xbd\x19\x76\x64\x02\x6c\x06\x80\xc2\x42\xe9\xb8\x6b\x16\xc0\x9f\x32\x01\xcc\x66\xe9\xd8\x95\x07\xf0\xe5\x5c\x00\xab\x55\x3e\x5e\x04\x70\xe3\x33\xc0\x36\x3a\x6e\xcb\x00\xf8\x69\x15\x40\x09\x00\xe4\x01\x80\x59\x3e\xcf\xb6\x4c\x80\x85\xcb\x25\x44\x6e\xe8\x04\xc0\x3a\x30\x88\xad\x26\x53\x60\xa0\xa7\x58\x6c\x36\x16\xa3\x03\x8a\xd1\x19\x06\x13\x3a\xc1\x40\xf7\xc6\x91\x37\x8a\xad\x26\x77\x60\xa0\xc7\x27\x36\x1b\xbd\xe8\x00\x2f\x3a\x27\xe1\x43\x27\xb8\xd1\x09\xc6\x04\xf2\x26\xb1\xd5\xe4\x0b\x0c\xf4\xa0\xd8\x6c\x44\x74\x00\xa2\x33\x0c\x3e\x99\x43\xa8\x9c\x41\xd6\x59\x84\x76\x78\x5c\x6c\x9d\x7f\x95\xc9\x0b\x46\xc4\x06\x90\x74\x4c\xe1\x2a\xdd\x83\x5b\xa1\x88\xb8\xd2\x78\x65\x7d\xc4\xeb\x0a\x5d\x17\x9b\x8d\x77\x03\x43\x2e\x0c\xee\x2f\x43\x51\x98\xc7\x78\x88\xcd\x85\x28\x36\xb3\xbf\xef\x92\x7e\xb1\xd5\x74\x85\xc6\x49\xbe\x92\xfd\xe2\x65\xfc\x1c\xc0\xee\x1b\xbb\x70\x12\x03\xe7\x8e\x60\x60\xb0\x07\x03\x83\x6f\x20\xe9\x63\xe7\x86\x5c\x48\xdc\x64\x78\xc9\xcf\xd1\xf2\x85\x18\x66\x5f\x98\xc7\xfe\x26\x7d\xe1\x9c\x8c\x5e\x16\xa3\x28\x79\x23\xb3\x39\x39\xfe\x06\x60\x7f\x87\x9d\x93\x7c\xe1\x65\xf1\x95\xe0\x65\xe7\x62\xdd\x1b\x7a\x2e\x3c\x26\x64\x93\xe5\x89\xcc\x25\x36\xd7\x89\x73\x43\x2e\x36\xb6\x48\x79\xf2\x81\xec\x0b\xc9\x2f\xa1\xbe\x22\xdf\x91\x0f\xcf\x1d\x61\xe7\xc8\xb7\x51\xf6\x5b\x4d\x26\x39\x16\x57\x58\x6c\x28\x46\x2c\x56\x85\x18\xc6\x89\xd9\x37\xde\x65\x39\x40\xb1\x96\x62\x6e\x62\x39\x40\xb9\xb0\x55\xca\x1f\x76\x3d\x34\x67\x26\xc6\x4f\x39\xd5\x3a\x5f\xca\x1f\xca\x35\x29\xe7\x0c\x61\xf9\x2b\xe5\x92\x2f\x2c\x67\x27\x62\xc2\xe4\x4d\x3e\xca\xf1\xb8\xf9\x2f\xe9\x74\xcb\x3a\xa4\x79\xe3\x00\xf2\xad\x97\xcd\xa9\x56\x93\x9b\x71\x8d\x2f\x3f\x91\xcf\x53\x73\xd6\x21\xc5\x88\xcd\x69\xca\xd7\xba\xf0\xf9\x3b\x32\x73\x0a\x4a\xb7\x50\x19\x5a\x67\x0a\x01\xc0\x1a\xba\xce\xcc\x8a\xbf\xce\x44\x71\xe6\x01\xc6\x5d\x8d\x30\xe6\xed\x07\xb1\x29\x7f\x62\x1c\x09\xa1\x74\x43\x27\xcc\x46\x1e\x84\x71\x57\x63\xfb\x98\xb7\xbf\x5d\x6c\xca\x6f\x47\x27\x24\x82\x40\x32\x2a\xf4\x3f\x82\x3c\xdc\x1a\x77\x35\xe2\x98\xb7\x1f\xc5\xa6\xfc\xc8\xf5\x2a\x12\xb7\x48\x46\xa5\xfe\x0f\x54\xe8\xff\x20\x91\xfe\x18\xbe\x2c\x48\x42\x7f\x41\xbc\x78\x30\x7f\x13\xe7\x29\x2c\x46\x1e\xae\xa9\xd0\x7f\x8d\xc9\x84\xeb\x98\x1d\xa2\x5f\x90\x39\x4c\xe0\x1a\xf2\x10\x1c\x77\xed\xc2\x31\xef\xdf\x51\xdc\x3d\x07\x91\x87\x44\x08\x12\x1f\x1a\x73\x08\x84\x10\xfd\xed\x51\x9c\x78\x40\xe2\x3f\xfa\xfe\x39\x1c\x3f\x2a\x20\xd9\x8a\x46\xa3\x8c\xd0\xbf\x27\xd1\xae\x48\xff\x7f\xde\xc5\x31\x9f\x9b\xf9\x29\x0c\x3e\x37\xbb\x46\xf6\xa3\xae\x49\x50\xa0\x7f\x17\xd3\x13\xfc\xde\x67\x59\x0c\x42\x41\xe7\xe8\x1a\x8d\x4d\xdc\x9d\x1f\x75\x9d\xe6\x8c\x22\xfd\x2c\xbe\x73\xc3\x6b\x36\xad\x7d\x4d\x73\xd9\x35\x1a\x23\x8b\x41\x74\xcc\x55\xe8\x8f\xce\x1f\x3a\x27\xe9\xdf\x75\x1f\xeb\x6f\x54\xe0\x9f\xe9\xf5\x53\x2c\xa2\xe2\xb3\x3b\x9f\xc5\x6e\xda\xf8\x2a\xd0\x4f\xb9\x14\x2b\xc7\x28\xf7\xa6\xcb\x4f\x25\xf1\xa5\xb9\x10\x3d\x3f\x22\xe7\x4f\x04\x8e\x0a\xd2\xdc\x53\x92\x3f\x3c\x08\x11\x73\xfb\x9a\x3c\xe7\xe3\xae\x09\xb4\x66\xd0\xda\x21\xfb\x27\x28\xaf\x41\xa1\x6b\x8c\x90\x70\x7d\x93\xee\x8f\xbb\xa6\x4d\xe5\x0f\xe3\x3f\xdd\xfa\x16\xbd\x3e\x4b\x1c\x94\xea\x4f\xb8\x3e\xc7\xac\x2f\xea\xf5\xab\xab\x5f\x52\xcd\x53\xaa\x5f\x6d\x7d\x9c\x2d\xd7\x84\xb8\x35\x9d\xe6\x0c\xe5\x35\xe5\x1e\xcb\x0f\x75\xf5\x7d\x5a\x50\xcf\x42\xbd\x0b\xf5\x30\xd4\xcb\xc4\xf3\x37\x22\xc2\x1d\x28\x0e\x43\x07\x70\x49\x21\x52\x0f\xe9\x2e\x91\x9f\xf5\x2a\x43\xfb\xb0\xbc\xe8\x3e\x8c\xee\xd5\x81\x89\x62\xca\xf2\x72\xf4\x43\x0f\xc3\x34\xfd\x4a\x2c\xc4\xd6\xab\xdb\xd7\xed\xdf\x4b\xfb\x91\x76\xa2\xed\x27\xd4\x93\x82\xfd\xd8\x78\x40\xed\xa7\x0b\x0f\xaa\xfd\xb4\xc5\x49\xb7\xaf\xdb\xd7\xed\xdf\x37\xf6\xd3\xbe\xbe\x3c\x60\xf6\xa7\xbd\x5f\x21\x1e\x60\xfb\x09\xfb\x8f\x14\xec\xa7\xa5\xff\xd1\xed\xeb\xf6\x35\xb5\xff\xe9\x85\xb4\x91\x4b\x62\xa0\x0f\xc0\x90\x0a\xe2\xe9\x9d\xd8\x4a\xe4\xdf\x8a\x6c\xa1\xef\x29\x2c\xca\x7e\x2f\xfa\xa4\x6e\x93\x39\xca\x03\x04\xf7\x59\x20\xe0\xe9\x05\xbf\xdf\xc7\xf6\x74\x8c\xf6\xb8\x73\x45\x15\x34\xe4\x3f\x13\x9d\x60\x41\x1e\x4a\x83\xfb\x2c\xa5\x01\x4f\x6f\xa9\xdf\xef\x63\x7b\x3a\x46\x3b\x94\xa2\x33\x25\x58\xc8\x86\x86\xfc\x49\xff\x31\xe4\xc1\x13\xdc\x67\xf1\x04\x3c\xbd\x1e\xbf\xdf\xc7\xf6\x74\x8c\x76\xf0\xa0\x33\x25\x1c\x23\x1b\x1a\xf2\x5f\x8a\x4e\x78\x0f\x79\xc0\xe0\x3e\x0b\x06\x3c\xbd\xe8\xf7\xfb\xd8\x9e\x8e\xd1\x9e\x72\x9f\xf1\x1e\xd9\xd0\x90\x7f\x29\xf3\x93\x76\xfc\x29\x06\xa5\x3a\x7f\x9d\xbf\xce\x5f\x35\x37\x25\x78\x14\x9d\x30\xac\x21\xff\x61\xd9\x86\xea\x1a\x37\x59\x9b\x12\xd7\x97\x8d\xe8\x84\x8b\x1a\xf2\xbf\x28\xdb\x50\x5d\xe3\x26\x6b\x53\xe2\xfa\x42\xfa\xef\x10\x4f\x8d\xf8\xdf\x91\x6d\xa8\xae\x71\x93\xb5\x49\x89\x9d\x48\xfe\xc3\xbf\xc5\x60\xdb\x02\xc4\x3a\xe9\x5a\x4a\x48\xfc\x5d\x08\x81\xea\x67\x54\x8d\x9b\x9c\x9b\x6a\xf9\xdf\xbe\x8c\x81\x0b\x27\xf0\xee\x8f\x57\x61\xb0\xcd\xc2\xce\x6b\x0c\xea\x55\xa2\xe6\x78\xb2\xfc\x47\x6f\x5e\xc2\xd1\xab\x67\xd9\x18\x02\xc3\xbd\xec\x9c\xc6\xa0\x7e\x2b\x7d\xfc\x6f\x5c\xc4\xd1\xeb\xe7\xd1\x7f\x7b\x84\xe5\x92\x22\xdc\xbe\x2c\x8d\x9b\x64\x6f\x5e\x62\xc7\x8a\x65\xfd\x3e\xea\x19\x3f\x3e\xff\xd3\x3d\x17\x4e\x30\x19\x1a\x77\x12\xb1\x4b\xab\xff\x55\xe7\x7f\x9b\x85\xdd\x4b\x32\x14\xb3\x24\xe6\x4e\x5a\xf3\x5f\xf5\xfa\x53\x07\xec\x5e\x92\x49\x72\xed\xa2\xe7\x8c\xf4\xf2\x57\xb3\xfe\xa7\x5e\x3b\x62\xf6\x18\x3a\x7f\x9d\xbf\xce\x5f\xe7\xaf\xf3\x4f\x92\xbf\x1d\x4a\xe5\xda\xa0\x6d\x0d\x8a\x94\x4d\x13\x7f\xaa\xc9\x72\x6d\xd6\xb6\x07\x08\x93\xbd\x9c\x36\xfe\xd4\x13\xc9\xbd\x91\xb6\x3d\x58\xa8\xec\xcd\x4b\x69\xe3\x4f\x3d\xa9\xdc\x9b\x6a\xdf\x03\xdf\x1e\x91\xc6\x7d\xe3\xe2\xc7\xe3\xff\x54\xa0\x91\xff\x55\xe5\x7f\x2a\xd0\x28\xff\xe9\x99\x58\x7e\x36\x4e\xfc\xfc\x9c\xea\xf3\x79\xea\xeb\x4f\xcc\x77\xd4\xaa\xde\x9f\x28\xb3\x93\xcc\xfa\x9f\xca\xfb\x13\xe5\xef\xaf\xb4\xe0\x2f\x7d\x73\x9f\xca\xfb\x2b\xe5\xef\x0f\xb5\xe3\x9f\xf4\xfb\x43\x25\x9b\xaa\x1e\x23\x39\xfe\xf7\xe6\xfd\xb3\xce\x5f\xe7\xff\xe9\xe4\xaf\xfc\x1d\x75\x72\xfc\xb5\xfe\xfd\x54\x49\x8d\x4b\x0c\x7b\x9c\xdf\xbe\xf9\x7b\xf2\xfb\xb5\x92\x1a\x97\x18\xf6\x38\xdf\x1e\xf0\xf7\xe4\xfb\x81\xd4\x61\x8f\xf3\xed\x07\xaf\xfd\xf7\x1b\xf7\xe3\x36\xf5\x91\x92\xbc\x1f\x01\x98\x99\x86\x7d\x1f\x29\x37\x7c\x72\xf6\xe9\xf2\x4b\xa4\xbf\x0f\xd4\x6c\x5c\x3b\x27\xa7\x28\x07\x00\xe6\x54\xaf\xab\xaa\x95\xff\x7b\x99\x39\xc3\x00\x00\xb9\x0f\xff\x64\x3b\x00\x67\xda\xb9\x7a\x75\xcd\xce\xfa\x7a\x80\xb6\x7f\xd7\xdb\x6c\xe5\x7b\x84\xa6\xbd\x8e\x7c\x9b\xad\x7f\xb0\x74\x71\xce\xde\xd6\xda\xae\xae\x1f\xd6\xda\x9e\x1c\xea\xfb\x5b\xdf\x00\x64\x1d\x70\xbf\x35\xe3\x47\x1c\xf7\x45\x73\xcb\xb6\x17\xb6\x2d\x31\x2c\xb1\x35\xd8\xee\xb4\xcc\xa9\x2a\xb7\x6e\x3d\x3f\xe3\x67\x6f\x55\x16\x8d\xac\x5f\x5e\xb2\x84\x7b\xa7\xbd\xe3\x42\xc9\xa2\x3f\xac\x34\xee\x78\x9d\xeb\x7e\xb5\x6e\x5b\x2d\x3c\xbc\xfd\x17\x86\x86\x1f\x58\x1c\xfb\xdf\x9d\x5f\x79\xfd\xb5\x6e\xf3\x76\xf3\x7f\xb3\xbb\x07\x0f\xe6\xda\xbf\xc9\x1d\x7b\xc5\x7c\xfd\xf3\xe6\x96\xb9\xff\xf8\xff\xca\xc0\xbc\xee\x8f\x04\xeb\xcf\x0f\x18\xbe\x95\xfb\xe2\x32\x03\x7f\xf0\xf5\xcd\x1d\xd7\x1d\x7b\xce\x96\xb9\x96\xbe\xbd\x61\xa8\xe4\x2b\xd6\xe3\xc7\x8f\x6f\xda\xb3\xc1\xfd\xcc\xfa\xaf\x65\x1f\x5d\xba\xbc\x7a\x70\xd9\xe6\x5b\x03\x4f\x9d\x2d\x5b\xd2\x5f\xb6\x7e\x69\xf5\xd3\xdc\xaf\x5f\x3a\xf9\x7f\x0f\x65\x2e\xcc\x59\xb5\xf0\x0d\xce\xb3\xe3\x70\xf5\x6b\x7f\x9e\x95\x51\xf3\x85\xca\x2d\xbf\x34\x9c\xba\x7c\xa6\xa4\x25\x6b\xe1\xcb\xe0\xee\x59\xe3\xe8\x3d\x69\x2b\xff\xdc\xc0\xda\x43\x2b\xd6\x76\x7e\xff\x54\xfb\x62\x83\xe1\x4c\xf1\x8b\x87\xaa\xcb\x0c\xa7\x33\x16\x64\x65\x89\xbf\xca\x5e\xf1\xf8\xea\xac\x2c\xee\xf9\xac\x97\x9f\x7f\x0e\xfe\xf2\xfb\x67\xc4\x1e\xfe\xd0\x19\x72\x5a\xfd\xba\xda\xa7\x01\xbe\xbb\x08\xa0\x63\x3f\xc0\x38\x02\x74\xbc\x0f\x50\x9b\x0d\x5c\xc1\x16\x80\x8a\x83\x00\xf3\x9e\xfd\xd7\x37\x8a\xbb\x01\xe0\xa1\x9a\x0d\x9b\xd6\x50\x04\x9c\xf4\xcf\xf3\xe1\xa8\xb9\xeb\x9f\xef\x00\x40\x86\x50\xbb\xf1\xab\x00\x2d\xaf\x0c\xae\x04\x00\x8e\x7f\x6a\x6d\x15\x74\xcd\x58\xb0\x0e\x00\x66\xed\x59\xf7\xf5\xe7\x00\x96\x3f\x4a\xe0\xda\x7a\x9e\x6c\x01\x80\x55\xd5\x55\xab\x36\x15\x0e\xd7\xdb\xfa\xe0\xc8\xe1\x37\x37\xff\xe6\xa3\x82\xa2\xca\xa2\xfd\xbb\x0a\xba\x8e\x35\x72\x9d\xa7\xb0\x38\xbb\xa6\x70\xeb\x9b\xe7\x4f\x7b\x6a\xde\x06\xe3\x38\xf7\x12\xf7\xbb\x16\xae\xf3\x54\x51\x0e\x9f\x99\x59\x69\x3c\xfc\xd7\x15\x56\x80\xf3\x2f\x74\x5a\x2e\x3d\x72\xf5\x55\x00\x58\x24\xac\xd9\x22\x34\xd8\x05\x47\x45\xfd\x5e\x87\x5d\x70\x40\xb9\x75\x45\xf9\x32\xeb\x13\xcb\xac\x4f\x6c\xb2\x5a\x2b\x1e\xb3\x56\x94\x3f\x56\x6a\x5d\x59\x61\xb5\x0e\x34\x9f\x68\x0f\x13\xf8\xf6\xb3\x0d\x3b\x9d\xdf\x89\x2f\xf0\xc7\x92\xdc\xd3\x94\xca\xd5\x6b\x36\x56\x1d\xfd\x92\xad\xf3\x7f\x01\x00\x00\xff\xff\xfc\xb2\x02\xf1\x0e\x47\x00\x00")

func iconsWorkingIcoBytes() ([]byte, error) {
	return bindataRead(
		_iconsWorkingIco,
		"icons/working.ico",
	)
}

func iconsWorkingIco() (*asset, error) {
	bytes, err := iconsWorkingIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "icons/working.ico", size: 18190, mode: os.FileMode(438), modTime: time.Unix(1489579452, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"icons/idle.ico": iconsIdleIco,
	"icons/problem.ico": iconsProblemIco,
	"icons/working.ico": iconsWorkingIco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"icons": &bintree{nil, map[string]*bintree{
		"idle.ico": &bintree{iconsIdleIco, map[string]*bintree{}},
		"problem.ico": &bintree{iconsProblemIco, map[string]*bintree{}},
		"working.ico": &bintree{iconsWorkingIco, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

